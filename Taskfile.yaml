# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

dotenv:
- .env.local
- .env

vars:
  VERSION:
    sh: >-
      git tag --points-at HEAD | cut -dv -f2  | grep .
      || svu prerelease --strip-prefix --pre-release alpha

includes:
  codecov:
    taskfile: .task/codecov.yaml
    internal: true
  image:
    taskfile: .task/docker.yaml
    vars:
      IMAGE_NAME: wwmoraes/anilistarr
      REPOSITORY: wwmoraes/anilistarr
  golang:
    dir: '{{ .ROOT_DIR }}'
    taskfile: .task/golang.yaml
    internal: true
    vars:
      TEST_IGNORE_PATTERNS: >-
        .gen.go:
        .pb.go:
        .pb.gw.go:
        .sql.go:
        .xo.go:
      TEST_PACKAGES: >-
        internal/adapters
        internal/api
        internal/drivers
        internal/entities
        internal/usecases
        pkg

tasks:
  build:
    aliases:
    - default
    desc: Builds the server binary.
    cmd:
      task: golang:build
      vars:
        FLAGS: -mod=readonly -trimpath -ldflags="-s -w -X 'main.version={{ .VERSION }}'"
        PACKAGE: ./cmd/handler/...
  check:
    # TODO add sources so we can use with watch
    desc: Runs all checks that validates changes.
    silent: true
    cmds:
    - lefthook run pre-commit {{ .CLI_ARGS }}
    - lefthook run pre-push {{ .CLI_ARGS }}
  clean:
    desc: Cleans up generated artifacts.
    vars:
      DIRECTORIES: >-
        bin
        build
        coverage
        dist
    deps:
    - for:
        var: DIRECTORIES
      task: gnu:rm:dir:{{ .ITEM }}
    - for: sources
      task: gnu:rm:file:{{ .ITEM }}
    sources:
    - golangci-lint-report.xml
  configure:
    desc: Configures the repository and project for work.
    deps:
    - lefthook:install
  coverage:
    desc: Shows test coverage from a test profile.
    deps:
    - test
    cmd:
      task: golang:coverage:show:all
  coverage:unit:
    desc: Shows test coverage from the unit test profile.
    deps:
    - test:unit
    cmd:
      task: golang:coverage:show:unit.part
  coverage:integration:
    desc: Shows test coverage from the integration test profile.
    deps:
    - test:integration
    cmd:
      task: golang:coverage:show:integration.part
  coverage:report:
    desc: (Re)generates the coverage report.
    deps:
    - test
    cmd:
      task: golang:coverage:report:all
  coverage:report:unit:
    desc: (Re)generates the unit coverage report.
    deps:
    - test:unit
    cmd:
      task: golang:coverage:report:unit.part
  coverage:report:integration:
    desc: (Re)generates the integration coverage report.
    run: once
    deps:
    - test:integration
    cmd:
      task: golang:coverage:report:integration.part
  coverage:upload:
    summary: Uploads all coverage data to Codecov.
    silent: true
    method: none
    deps:
    - coverage:upload:unit
    - coverage:upload:integration
  coverage:upload:unit:
    summary: Uploads the unit test coverage data to Codecov.
    deps:
    - test:unit
    requires:
      vars:
      - CODECOV_TOKEN
    env:
      CODECOV_TOKEN: '{{ .CODECOV_TOKEN }}'
      CODECOV_NAME: unit
    cmds:
    - task: golang:test:junit:unit
    - task: codecov:report:flagged:unit:coverage/unit.part.txt
    - task: codecov:report:tests:unit:coverage/unit.junit.xml
  coverage:upload:integration:
    summary: Uploads the integration test coverage data to Codecov.
    deps:
    - test:integration
    requires:
      vars:
      - CODECOV_TOKEN
    env:
      CODECOV_TOKEN: '{{ .CODECOV_TOKEN }}'
      CODECOV_NAME: integration
    cmds:
    - task: golang:test:junit:integration
    - task: codecov:report:flagged:integration:coverage/integration.part.txt
    - task: codecov:report:tests:integration:coverage/integration.junit.xml
  db:
    desc: Creates a blank SQLite database file from the schema.
    cmd: sqlite3 anilist-tvdb.db < db/schema.sqlite.sql
    sources:
    - db/schema.sqlite.sql
    generates:
    - anilist-tvdb.db
  docs:
    desc: Starts a local Golang package documentation server.
    silent: true
    ignore_error: true
    cmd: pkgsite -open
  fix:
    desc: Applies linter lixes to code when supported.
    deps:
    - task: golang:fix
  generate:diagrams:
    desc: Generates system diagrams based on the domain model.
    cmds:
    - structurizr-cli export -f plantuml/c4plantuml -w docs/workspace.dsl -o docs
    - plantuml docs/*.puml
    sources:
    - docs/workspace.dsl
    - docs/components.puml
    generates:
    - docs/structurizr-*.puml
    - docs/*.png
  git:hook:clean:
    internal: true
    summary: Removes git hooks from the local repository.
    vars:
      GIT_CORE_HOOKSPATH: '{{ .GIT_CORE_HOOKSPATH | default ".git/hooks" }}'
    deps:
    - for: sources
      task: gnu:rm:file:{{ .ITEM }}
    sources:
    - '{{ .GIT_CORE_HOOKSPATH }}/*'
  invoke:get-user:
    desc: Retrieves user ID through the handler API.
    vars:
      USERNAME: '{{ .CLI_ARGS | default "algwyn" }}'
    cmd: curl -v "http://${HOST}:${PORT}/user/{{ .USERNAME }}/id"
  invoke:get-media:
    desc: Retrieves user media through the handler API.
    vars:
      USERNAME: '{{ .CLI_ARGS | default "algwyn" }}'
    cmd: curl -v "http://${HOST}:${PORT}/user/{{ .USERNAME }}/media"
  lefthook:install:
    summary: Configures git hooks using lefthook.
    vars:
      GIT_CORE_HOOKSPATH: .git/hooks # sh: git rev-parse --git-path hooks
    cmds:
    - task: git:hook:clean
      vars:
        GIT_CORE_HOOKSPATH: '{{ .GIT_CORE_HOOKSPATH }}'
    - lefthook install
    sources:
    - .lefthook.yaml
    - .lefthook-local.yaml
    generates:
    - '{{ .GIT_CORE_HOOKSPATH }}/*'
  lint:
    desc: Runs static analysis on the code base.
    deps:
    - task: lint:code
    - task: image:lint
    - task: lint:markdown
  lint:code:
    summary: Runs static analysis on the source code.
    vars:
      GOLANGCI_LINT_SARIF: '{{ .GOLANGCI_LINT_SARIF | default "golangci-lint.sarif" }}'
    cmds:
    - golangci-lint run
    - sarif-fmt -i {{ .GOLANGCI_LINT_SARIF | q }}
    - jq -e '[.runs[].results[] | select(.level == "error")] | length | . == 0'
      {{ .GOLANGCI_LINT_SARIF | q }} > /dev/null
    sources:
    - .golangci.yaml
    - cmd/**/*.go
    - internal/**/*.go
    - pkg/**/*.go
    generates:
    - '{{ .GOLANGCI_LINT_SARIF }}'
  lint:commits:
    vars:
      REMOTE:
        sh: git remote
      LOCAL_BRANCH:
        sh: git branch --show-current
      REMOTE_BRANCH:
        sh: git rev-parse --symbolic-full-name @{u} || echo -n "{{ .DEFAULT }}"
      DEFAULT:
        sh: >-
          git remote set-head origin --auto;
          git symbolic-ref refs/remotes/{{ .REMOTE }}/HEAD
    cmd: cog check {{ .REMOTE_BRANCH }}..{{ .LOCAL_BRANCH }}
  lint:markdown:
    summary: Lints markdown files.
    cmd: markdownlint .
    sources:
    - "**/*.md"
  redis:cli:
    desc: Opens a Redis CLI instance towards the Redis proxy.
    interactive: true
    ignore_error: true
    cmd: redis-cli -p 16379
  redis:proxy:
    desc: Starts a local Redis proxy to the upstream instance on Fly.
    interactive: true
    ignore_error: true
    cmd: flyctl redis proxy
  run:handler:
    desc: Runs the API handler.
    interactive: true
    ignore_error: true
    deps:
    - build
    cmd: ./bin/handler
  release:snapshot:
    desc: Creates a snapshot release of the solution.
    deps:
    - build
    cmd: goreleaser release --clean --skip-publish --skip-announce --snapshot
  test:
    desc: Runs all tests.
    deps:
    - test:unit
    - test:integration
    cmd:
      task: golang:test:merge:all
      vars:
        SOURCES: '*.part'
  test:container:
    desc: Tests the generated container image structure.
    cmd: >-
      container-structure-test test
      -c container-structure-test.yaml
      -i wwmoraes/anilistarr:edge
  test:integration:
    desc: Runs instrumented tests.
    cmd:
      task: golang:test:instrumented:integration.part
      vars:
        CLI_ARGS: -covermode atomic -race
        GOCOVERDIR: coverage/integration
        PACKAGE: ./cmd/internal/integration/...
  test:unit:
    desc: Runs unit tests.
    vars:
      CLI_ARGS: -v -shuffle on -covermode atomic -race {{ .CLI_ARGS }}
    deps:
    - task: golang:test:unit:impure.unit
      vars:
        CLI_ARGS: '{{ .CLI_ARGS }}'
    - task: golang:test:unit:pure.unit
      vars:
        CLI_ARGS: -tags=pure {{ .CLI_ARGS }}
    cmds:
    - task: golang:test:merge:unit.part
      vars:
        SOURCES: '*.unit'
  tidy:
    desc: Installs golang dependencies.
    cmd:
      task: golang:tidy
