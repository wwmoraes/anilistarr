package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"os"
	"text/template"

	"golang.org/x/mod/modfile"
)

const templateString = `// Code generated by go generate. DO NOT EDIT.

package {{ .Package }}

const (
	{{ .Constants.Module }}    = "{{ .Module }}"
	{{ .Constants.Version }}   = "{{ .Version }}"
	{{ .Constants.Name }}      = "{{ .Name }}"
	{{ .Constants.Namespace }} = "{{ .Namespace }}"
)`

type templateData struct {
	Module    string
	Name      string
	Namespace string
	Package   string
	Version   string
	Constants constantNames
}

type constantNames struct {
	Module    string
	Name      string
	Namespace string
	Version   string
}

//nolint:funlen // TODO refactor version main func
func main() {
	constModule := flag.String(
		"const-module",
		"MODULE",
		"module constant name",
	)
	constName := flag.String(
		"const-name",
		"NAME",
		"application/service name constant name",
	)
	constNamespace := flag.String(
		"const-namespace",
		"NAMESPACE",
		"namespace constant name",
	)
	constVersion := flag.String(
		"const-version",
		"VERSION",
		"version constant name",
	)

	modFile := flag.String(
		"mod",
		"go.mod",
		"Go mod file path",
	)
	name := flag.String(
		"name",
		"",
		"application/service name",
	)
	namespace := flag.String(
		"namespace",
		"",
		"namespace of the application (as per Open Telemetry definitions)",
	)
	packageName := flag.String(
		"package",
		"main",
		"name of the target package",
	)
	version := flag.String(
		"version",
		"",
		"version of the application",
	)

	output := flag.String(
		"output",
		"",
		"output file to generate",
	)

	flag.Parse()

	assert(checkFlag("name"))
	assert(checkFlag("namespace"))
	assert(checkFlag("version"))
	assert(checkFlag("output"))

	constantsTemplate, err := template.New("").Parse(templateString)
	assert(err)

	modData, err := os.ReadFile(*modFile)
	assert(err)

	mod, err := modfile.Parse(*modFile, modData, nil)
	assert(err)

	var buf bytes.Buffer
	err = constantsTemplate.Execute(&buf, templateData{
		Module:    mod.Module.Mod.Path,
		Name:      *name,
		Namespace: *namespace,
		Package:   *packageName,
		Version:   *version,
		Constants: constantNames{
			Module:    *constModule,
			Name:      *constName,
			Namespace: *constNamespace,
			Version:   *constVersion,
		},
	})
	assert(err)

	data, err := format.Source(buf.Bytes())
	assert(err)

	fd, err := os.Create(*output)
	assert(err)
	defer fd.Close()

	_, err = fd.Write(data)
	assert(err)
}

func assert(err error) {
	if err == nil {
		return
	}

	fmt.Fprintln(os.Stderr, err.Error())
	os.Exit(1)
}

func checkFlag(name string) error {
	f := flag.Lookup(name)
	if f == nil {
		return fmt.Errorf("flag %s not defined", name)
	}

	if len(f.Value.String()) == 0 {
		return fmt.Errorf("flag %s must be set", name)
	}

	return nil
}
