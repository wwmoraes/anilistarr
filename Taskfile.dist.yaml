# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

dotenv:
- .env.local
- .env

includes:
  codecov: https://github.com/wwmoraes/kaizen.git//taskfile/codecov.yaml
  docker:
    taskfile: https://github.com/wwmoraes/kaizen.git//taskfile/docker.yaml
    vars:
      NAME: wwmoraes/anilistarr
      PLATFORMS: >-
        linux/amd64
        linux/arm/v7
        linux/arm64
      BUILD_ARGS: >-
        VERSION={{ .VERSION | q }}
        {{ with .ALPINE_VERSION -}}ALPINE_VERSION={{ . | q }}{{- end }}
        {{ with .GOLANG_VERSION -}}GOLANG_VERSION={{ . | q }}{{- end }}
      LABELS: >-
        org.opencontainers.image.documentation=https://github.com/wwmoraes/anilistarr/blob/{{ .BRANCH }}/README.md
        org.opencontainers.image.revision={{ .REVISION | q }}
        org.opencontainers.image.source=https://github.com/wwmoraes/anilistarr
        org.opencontainers.image.url=https://hub.docker.com/r/wwmoraes/anilistarr
        org.opencontainers.image.version={{ .VERSION | q }}
      TAGS: >-
        {{ .BRANCH }}
        {{ .VERSION | splitList "+" | first }}
        {{- if not (contains "-" .VERSION) }}
        latest
        {{ .VERSION | splitList "+" | first | splitList "." | initial | join "." }}
        {{ .VERSION | splitList "+" | first | splitList "." | first }}
        {{- end }}
  git:
    taskfile: https://github.com/wwmoraes/kaizen.git//taskfile/git.yaml
    vars:
      GIT_PRE_COMMIT_TASKS: >-
        tidy
        fix
        lint
      GIT_PRE_PUSH_TASKS: >-
        build
        test
  gnu: https://github.com/wwmoraes/kaizen.git//taskfile/gnu.yaml
  golang:
    taskfile: https://github.com/wwmoraes/kaizen.git//taskfile/golang.yaml
    vars:
      TEST_IGNORE_PATTERNS: >-
        .gen.go:
        .pb.go:
        .pb.gw.go:
        .sql.go:
        .xo.go:
      TEST_PACKAGES: >-
        internal/adapters
        internal/api
        internal/drivers
        internal/entities
        internal/usecases
        pkg
  markdown: https://github.com/wwmoraes/kaizen.git//taskfile/markdown.yaml

tasks:
  build:
    desc: Builds the server binary.
    cmd:
      task: golang:build
      vars:
        CLI_ARGS: >-
          -mod=readonly
          -trimpath
          -race
          -ldflags="-s -w -X 'main.version={{ .VERSION }}+{{ .REVISION }}'"
        PACKAGE: ./cmd/handler/...
  check:
    aliases: [default]
    desc: Runs all checks that validates changes.
    deps:
    - git:hooks:pre-commit
    - git:hooks:pre-push
  clean:
    desc: Cleans up generated artifacts.
    vars:
      DIRECTORIES: >-
        bin
        build
        coverage
        dist
    deps:
    - for:
        var: DIRECTORIES
      task: gnu:rm:dir:{{ .ITEM }}
    - for: sources
      task: gnu:rm:file:{{ .ITEM }}
    sources:
    - golangci-lint-report.xml
  configure:
    summary: Sets up a local copy of this repository for contribution.
    deps:
    - task: git:hooks:install
  coverage:
    desc: Shows test coverage from a test profile.
    deps:
    - test
    cmd:
      task: golang:coverage:show:all
  coverage:treemap:
    desc: Generate a coverage treemap/heatmap from all tests.
    deps:
    - test
    cmd:
      task: golang:coverage:treemap:all
  coverage:treemap:unit:
    desc: Generate a coverage treemap/heatmap from unit tests.
    deps:
    - test:unit
    cmd:
      task: golang:coverage:treemap:unit.part
  coverage:treemap:integration:
    desc: Generate a coverage treemap/heatmap from integration tests.
    deps:
    - test:integration
    cmd:
      task: golang:coverage:treemap:integration.part
  coverage:unit:
    desc: Shows test coverage from the unit test profile.
    deps:
    - test:unit
    cmd:
      task: golang:coverage:show:unit.part
  coverage:integration:
    desc: Shows test coverage from the integration test profile.
    deps:
    - test:integration
    cmd:
      task: golang:coverage:show:integration.part
  coverage:report:
    desc: (Re)generates the coverage report.
    deps:
    - test
    cmd:
      task: golang:coverage:report:all
  coverage:report:unit:
    desc: (Re)generates the unit coverage report.
    deps:
    - test:unit
    cmd:
      task: golang:coverage:report:unit.part
  coverage:report:integration:
    desc: (Re)generates the integration coverage report.
    run: once
    deps:
    - test:integration
    cmd:
      task: golang:coverage:report:integration.part
  coverage:upload:
    summary: Uploads all coverage data to Codecov.
    silent: true
    method: none
    deps:
    - coverage:upload:unit
    - coverage:upload:integration
  coverage:upload:unit:
    summary: Uploads the unit test coverage data to Codecov.
    deps:
    - test:unit
    requires:
      vars:
      - CODECOV_TOKEN
    env:
      CODECOV_TOKEN: '{{ .CODECOV_TOKEN }}'
      CODECOV_NAME: unit
    cmds:
    - task: golang:test:junit:unit
    - task: codecov:report:flagged:unit:coverage/unit.part.txt
    - task: codecov:report:tests:unit:coverage/unit.junit.xml
  coverage:upload:integration:
    summary: Uploads the integration test coverage data to Codecov.
    deps:
    - test:integration
    requires:
      vars:
      - CODECOV_TOKEN
    env:
      CODECOV_TOKEN: '{{ .CODECOV_TOKEN }}'
      CODECOV_NAME: integration
    cmds:
    - task: golang:test:junit:integration
    - task: codecov:report:flagged:integration:coverage/integration.part.txt
    - task: codecov:report:tests:integration:coverage/integration.junit.xml
  # db:
  #   desc: Creates a blank SQLite database file from the schema.
  #   cmd: sqlite3 anilist-tvdb.db < db/schema.sqlite.sql
  #   sources:
  #   - db/schema.sqlite.sql
  #   generates:
  #   - anilist-tvdb.db
  docs:
    desc: Starts a local Golang package documentation server.
    silent: true
    ignore_error: true
    cmd: pkgsite -open
  fix:
    desc: Applies linter lixes to code when supported.
    deps:
    - task: golang:fix
    - task: markdown:fix
  generate:diagrams:
    desc: Generates system diagrams based on the domain model.
    vars:
      STRUCTURIZR_SITE_GENERATR_OPTS: >-
        -Dapple.awt.headless=true
        -Djava.awt.headless=true
        {{ .STRUCTURIZR_SITE_GENERATR_OPTS }}
      VMARGS: >-
        -Dapple.awt.headless=true
        -Djava.awt.headless=true
        {{ .VMARGS }}
    env:
      STRUCTURIZR_SITE_GENERATR_OPTS: '{{ .STRUCTURIZR_SITE_GENERATR_OPTS }}'
      VMARGS: '{{ .VMARGS }}'
    cmds:
    - structurizr-cli export -f plantuml/c4plantuml -w docs/workspace.dsl -o docs
    - plantuml docs/*.puml
    sources:
    - docs/workspace.dsl
    - docs/components.puml
    generates:
    - docs/structurizr-*.puml
    - docs/*.png
  invoke:get-user:
    desc: Retrieves user ID through the handler API.
    vars:
      USERNAME: '{{ .CLI_ARGS | default "algwyn" }}'
    cmd: curl -v "http://${HOST}:${PORT}/user/{{ .USERNAME }}/id"
  invoke:get-media:
    desc: Retrieves user media through the handler API.
    vars:
      USERNAME: '{{ .CLI_ARGS | default "algwyn" }}'
    cmd: curl -v "http://${HOST}:${PORT}/user/{{ .USERNAME }}/media"
  lint:
    desc: Runs static analysis on the code base.
    deps:
    - task: docker:lint:sarif
    - task: golang:lint
    - task: markdown:lint
    - task: style:lint
    - task: task:lint
    - task: typos:lint
  style:lint:
    run: when_changed
    cmd: editorconfig-checker
    sources:
    - ./**/*.*
    - exclude: ./**/*.gen.go
    - exclude: ./**/*.sarif
    - exclude: ./bin/**/*.*
    - exclude: ./dist/**/*.*
    - exclude: ./nix/**/*.*
    - exclude: ./tmp/**/*.*
  task:lint:
    deps:
    - for: sources
      task: task:lint:{{ .ITEM }}
    sources:
    - "{{ .ROOT_TASKFILE }}"
    - .task/**/*.yml
    - .task/**/*.yaml
  task:lint:*:
    label: task:lint:{{ splitList "-taskfile." .FILE | first }}
    prefix: task:lint:{{ splitList "-taskfile." .FILE | first }}
    run: when_changed
    vars:
      FILE: '{{ index .MATCH 0 }}'
    cmd: task -a -j -t {{ .FILE }} > /dev/null
    sources:
    - "{{ .FILE }}"
  typos:lint:
    desc: Checks for typos in text files.
    cmd: typos --force-exclude
    run: when_changed
    sources:
    - ./**/*.*
    - exclude: ./**/*.gen.go
    - exclude: ./**/*.sarif
    - exclude: ./bin/**/*.*
    - exclude: ./dist/**/*.*
    - exclude: ./nix/**/*.*
    - exclude: ./tmp/**/*.*
    - exclude: .golangci.yaml
  redis:cli:
    desc: Opens a Redis CLI instance towards the Redis proxy.
    interactive: true
    ignore_error: true
    cmd: redis-cli -p 16379
  redis:proxy:
    desc: Starts a local Redis proxy to the upstream instance on Fly.
    interactive: true
    ignore_error: true
    cmd: flyctl redis proxy
  docker:run:handler:
    cmd:
      task: docker:run
      vars:
        DOCKER_RUN_CLI_ARGS: >-
          -e DATA_PATH=/var/handler
  run:handler:
    desc: Runs the API handler.
    interactive: true
    ignore_error: true
    deps:
    - build
    cmd: ./bin/handler
  release:snapshot:
    desc: Creates a snapshot release of the solution.
    deps:
    - build
    cmd: goreleaser release --clean --skip-publish --skip-announce --snapshot
  test:
    desc: Runs all tests.
    deps:
    - test:unit
    - test:integration
    cmd:
      task: golang:test:merge:all
      vars:
        SOURCES: '*.part'
  ## TODO move to .task/docker.yaml
  test:container:
    desc: Tests the generated container image structure.
    cmd: >-
      container-structure-test test
      -c container-structure-test.yaml
      -i wwmoraes/anilistarr:edge
  test:integration:
    desc: Runs instrumented tests.
    cmd:
      task: golang:test:instrumented:integration.part
      vars:
        CLI_ARGS: -covermode atomic -race
        GOCOVERDIR: coverage/integration
        PACKAGE: ./cmd/internal/integration/...
  test:unit:
    desc: Runs unit tests.
    vars:
      CLI_ARGS: -shuffle on -covermode atomic -race -short {{ .CLI_ARGS }}
    deps:
    - task: golang:test:unit:impure.unit
      vars:
        CLI_ARGS: '{{ .CLI_ARGS }}'
    - task: golang:test:unit:pure.unit
      vars:
        CLI_ARGS: -tags=pure {{ .CLI_ARGS }}
    cmds:
    - task: golang:test:merge:unit.part
      vars:
        SOURCES: '*.unit'
  tidy:
    desc: Installs golang dependencies.
    cmd:
      task: golang:tidy
  run:gotests:
    desc: Generates tests for individual source files.
    cmd: >-
      gotests -w -exported -parallel
      -template_dir {{ joinPath .ROOT_DIR ".meta/gotests/templates" | q }}
      {{ .CLI_ARGS }}
  run:coverage:
    deps:
    - coverage:report:unit
    - coverage:treemap:unit
    cmds:
    - clear
    - >-
      task -s coverage:unit
      | grcat conf.golang
      | grep -v 100.0%
  debug:
    cmd: |-
      echo "${GOCOVERDIR}"
