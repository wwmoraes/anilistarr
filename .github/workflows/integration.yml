name: Integration

# yamllint disable-line rule:truthy
on:
  push:
    branches:
    - master
    tags-ignore:
    - "*"
    paths:
    - .dockerignore
    - .env
    - .envrc
    - .github/workflows/integration.yml
    - .golangci.yaml
    - .goreleaser.yaml
    - '**.go'
    - container-structure-test.yaml
    - Dockerfile
    - go.mod
    - go.sum
    - sonar-project.properties
  pull_request:
    branches:
    - master
    paths:
    - .dockerignore
    - .env
    - .envrc
    - .github/workflows/integration.yml
    - .golangci.yaml
    - .goreleaser.yaml
    - '**.go'
    - container-structure-test.yaml
    - Dockerfile
    - go.mod
    - go.sum
    - sonar-project.properties

env:
  GOLANG_FLAGS: -race -mod=readonly
  GOLANG_COVERAGE_PATH: coverage
  GOLANG_RUN_REPORT_FILE: coverage/run-report.json
  GOLANG_VERSION: "1.22"
  WORK_DIR: /usr/src

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  metadata:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: calculate version
      uses: paulhatch/semantic-version@v5.0.3
      id: version
      with:
        branch: ${{ github.ref_name }}
        bump_each_commit: false
        change_path: >-
          cmd/handler
          internal
          go.mod
          go.sum
        major_pattern: /^BREAKING CHANGE:|^[^()!:]+(?:\([^()!:]+\))?!:/
        minor_pattern: /^feat(?:\([^()!:]+\))?:/
        search_commit_body: true
        user_format_type: csv
        version_format: ${major}.${minor}.${patch}-rc.${increment}
    - name: generate container meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        context: workflow
        images: ${{ github.repository }}
        flavor: |
          latest=true
        # yamllint disable rule:line-length
        labels: |
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/master/README.md
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.url=https://hub.docker.com/r/${{ github.repository }}
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
        # yamllint enable rule:line-length
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=${{ env.BRANCH }}
          type=semver,pattern={{version}}
        github-token: ${{ github.token }}
    outputs:
      major: ${{ steps.version.outputs.major }}
      minor: ${{ steps.version.outputs.minor }}
      patch: ${{ steps.version.outputs.patch }}
      increment: ${{ steps.version.outputs.increment }}
      version_type: ${{ steps.version.outputs.version_type }}
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.version_tag }}
      revision: ${{ steps.version.outputs.current_commit }}
      authors:  ${{ steps.version.outputs.authors }}
      container-labels: ${{ steps.meta.outputs.labels }}
      container-tags: ${{ steps.meta.outputs.tags }}
  build:
    runs-on: ubuntu-latest
    needs: metadata
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: direnv nix
      uses: JRMurr/direnv-nix-action@v4.1.0
      with:
        install-nix: true
        cache-store: true
    - name: set golang environment variables
      uses: wwmoraes/actions/golang/env@master
    - name: cache modules
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${GOMODCACHE}
        key: ${{ runner.os }}-modules-${{ hashFiles('go.sum') }}
        restore-keys: |
          ${{ runner.os }}-modules-${{ hashFiles('go.sum') }}
          ${{ runner.os }}-modules-
    - name: download modules
      run: go mod download -x
    - name: cache build
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${GOCACHE}
        key: ${{ runner.os }}-build-${{ hashFiles('**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ hashFiles('**/*.go') }}
          ${{ runner.os }}-build-
    - name: build
      run: direnv exec . task build
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: direnv nix
      uses: JRMurr/direnv-nix-action@v4.1.0
      with:
        install-nix: true
        cache-store: true
    - name: set golang environment variables
      uses: wwmoraes/actions/golang/env@master
    - name: cache modules
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${GOMODCACHE}
        key: ${{ runner.os }}-modules-${{ hashFiles('go.sum') }}
        restore-keys: |
          ${{ runner.os }}-modules-${{ hashFiles('go.sum') }}
          ${{ runner.os }}-modules-
    - name: download modules
      run: go mod download
    - name: cache lint
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${HOME}/.cache/golangci-lint
        key: ${{ runner.os }}-lint-${{ hashFiles('.golangci.yaml') }}
        restore-keys: |
          ${{ runner.os }}-lint-${{ hashFiles('.golangci.yaml') }}
          ${{ runner.os }}-lint-
    - name: run lint
      run: direnv exec . task lint
      continue-on-error: true
    - name: Upload golangci-lint report
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: golangci-lint.sarif
        category: golangci-lint
    - name: Upload hadolint report
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint.sarif
        category: hadolint
  test:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: direnv nix
      uses: JRMurr/direnv-nix-action@v4.1.0
      with:
        install-nix: true
        cache-store: true
    - name: set golang environment variables
      uses: wwmoraes/actions/golang/env@master
    - name: cache modules
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${GOMODCACHE}
        key: ${{ runner.os }}-modules-${{ hashFiles('go.sum') }}
        restore-keys: |
          ${{ runner.os }}-modules-${{ hashFiles('go.sum') }}
          ${{ runner.os }}-modules-
    - name: download modules
      run: go mod download
    - name: cache test
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${GOCACHE}
        key: ${{ runner.os }}-test-${{ hashFiles('**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-test-${{ hashFiles('**/*.go') }}
          ${{ runner.os }}-test-
    - name: run test
      run: direnv exec . task test
    - name: upload coverage report
      run: task coverage:upload
      if: always()
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  container:
    runs-on: ubuntu-latest
    needs: metadata
    env:
      # runner context is not available here...
      GRYPE_DB_CACHE_TEMP_PATH: .cache/grype/db/
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: direnv nix
      uses: JRMurr/direnv-nix-action@v4.1.0
      with:
        install-nix: true
        cache-store: true
    - name: set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: set up docker buildx
      uses: docker/setup-buildx-action@v2
    - name: cache buildx
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: ${{ runner.temp }}/.buildx-cache
        # yamllint disable-line rule:line-length
        key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', '.dockerignore') }}
        # yamllint disable rule:line-length
        restore-keys: |
          ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', '.dockerignore') }}
          ${{ runner.os }}-buildx-
        # yamllint enable rule:line-length
    # - name: build single-arch test image
    #   uses: docker/build-push-action@v3
    #   env:
    #     DOCKER_BUILDKIT: 0
    #     BUILDKIT_INLINE_CACHE: 1
    #   with:
    #     push: false
    #     load: true
    #     labels: ${{ needs.metadata.outputs.container-labels }}
    #     cache-to: |
    #       type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
    #     cache-from: |
    #       type=local,src=${{ runner.temp }}/.buildx-cache
    #       ${{ needs.metadata.outputs.container-tags }}
    #       ${{ github.repository }}:test
    #     tags: ${{ github.repository }}:test
    #     build-args: |
    #       GOLANG_VERSION=${{ env.GOLANG_VERSION }}
    #       VERSION=${{ needs.metadata.outputs.version }}
    - name: build container image
      run: >-
        direnv exec . task docker:build
        --cache-to type=local,mode=max,dest=${{ runner.temp }}/.buildx-cache-new
        --cache-from type=local,src=${{ runner.temp }}/.buildx-cache
        --build-arg GOLANG_VERSION=${{ env.GOLANG_VERSION }}
    # fix to prevent ever-growing caches
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf ${{ runner.temp }}/.buildx-cache
        mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache
    - name: test container
      run: direnv exec . task test:container
